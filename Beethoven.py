import os import logging import random import string import sqlite3 from aiogram import Bot, Dispatcher, types, F, Router from aiogram.fsm.storage.memory import MemoryStorage from aiogram.fsm.context import FSMContext from aiogram.filters.state import State, StatesGroup from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton from aiogram.utils.keyboard import InlineKeyboardBuilder from dotenv import load_dotenv import asyncio

--- –ó–∞–≥—Ä—É–∑–∫–∞ .env ---

load_dotenv() BOT_TOKEN = os.getenv("BOT_TOKEN") if not BOT_TOKEN: raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤ ---

logging.basicConfig(level=logging.INFO) logger = logging.getLogger(name)

--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---

bot = Bot(token=BOT_TOKEN) storage = MemoryStorage() dp = Dispatcher(storage=storage) router = Router()

--- –ú–µ–Ω–µ–¥–∂–µ—Ä—ã ---

MANAGERS = [5546292835, 1789838272]

--- –ë–î ---

conn = sqlite3.connect("tickets.db") cursor = conn.cursor() cursor.execute(""" CREATE TABLE IF NOT EXISTS tickets ( code TEXT PRIMARY KEY, user_id INTEGER, problem TEXT, status TEXT ) """) cursor.execute(""" CREATE TABLE IF NOT EXISTS problem_feedback ( id INTEGER PRIMARY KEY AUTOINCREMENT, description TEXT, count INTEGER DEFAULT 1 ) """) conn.commit()

--- –°–æ—Å—Ç–æ—è–Ω–∏—è ---

class Form(StatesGroup): waiting_for_device = State() waiting_for_server = State() waiting_for_country = State() waiting_for_resolve = State() waiting_for_problem_desc = State() waiting_for_idea = State() waiting_for_rating = State() waiting_for_manager_problem = State() waiting_for_admin_code = State() waiting_for_admin_code2 = State()

--- –§—Ä–∞–∑—ã ---

FAREWELL_PHRASES = [ "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ LKN VPN!", "–ñ–µ–ª–∞–µ–º –≤–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!", "–í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!", "VPN —Å –ª—é–±–æ–≤—å—é –æ—Ç LKN üíô", "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!" ]

--- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def main_menu(): kb = InlineKeyboardBuilder() kb.row( InlineKeyboardButton(text="–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="how_connect"), InlineKeyboardButton(text="–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN", callback_data="vpn_not_work") ) kb.row( InlineKeyboardButton(text="–°–±–æ—Ä ip, –ª–æ–≥–æ–≤", callback_data="logs"), InlineKeyboardButton(text="–ö–æ–≥–¥–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="paid_subscription") ) kb.row( InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", callback_data="ideas"), InlineKeyboardButton(text="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –†–§ —Å–µ—Ä–≤–µ—Ä", callback_data="rf_server") ) return kb.as_markup()

def device_menu(): kb = InlineKeyboardBuilder() kb.row( InlineKeyboardButton(text="Android", callback_data="device_Android"), InlineKeyboardButton(text="MacOS", callback_data="device_MacOS") ) kb.row( InlineKeyboardButton(text="Windows", callback_data="device_Windows"), InlineKeyboardButton(text="IOS", callback_data="device_IOS") ) return kb.as_markup()

def server_menu(): kb = InlineKeyboardBuilder() kb.row( InlineKeyboardButton(text="–†–æ—Å—Å–∏—è üá∑üá∫", callback_data="server_Russia"), InlineKeyboardButton(text="–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±", callback_data="server_Netherlands") ) return kb.as_markup()

def countries_menu(): countries = ["–£–∫—Ä–∞–∏–Ω–∞", "–†–æ—Å—Å–∏—è", "–°–®–ê", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ë–µ–ª–∞—Ä—É—Å—å", "–ù–µ—Ç –º–æ–µ–π —Å—Ç—Ä–∞–Ω—ã"] kb = InlineKeyboardBuilder() for c in countries: kb.button(text=c, callback_data=f"country_{c}") kb.adjust(2) return kb.as_markup()

def resolve_menu(): kb = InlineKeyboardBuilder() kb.row( InlineKeyboardButton(text="–†–µ—à–µ–Ω–æ", callback_data="resolved"), InlineKeyboardButton(text="–ù–µ —Ä–µ—à–µ–Ω–æ", callback_data="not_resolved") ) return kb.as_markup()

def rating_keyboard(): kb = InlineKeyboardBuilder() for i in range(1,6): kb.button(text=str(i), callback_data=f"rating_{i}") kb.adjust(5) return kb.as_markup()

def admin_panel(): kb = InlineKeyboardBuilder() kb.button(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–¥", callback_data="admin_answer") return kb.as_markup()

--- –£—Ç–∏–ª–∏—Ç—ã ---

def generate_ticket_code(): chars = string.ascii_uppercase + string.digits while True: code = ''.join(random.choice(chars) for _ in range(6)) cursor.execute("SELECT code FROM tickets WHERE code = ?", (code,)) if not cursor.fetchone(): return code

async def send_farewell(user_id): phrase = random.choice(FAREWELL_PHRASES) await bot.send_message(user_id, phrase, reply_markup=main_menu())

--- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message(F.text.lower() == "—Å–∏–º—Ñ–æ–Ω–∏—è") async def admin_code1(message: types.Message, state: FSMContext): if message.from_user.id in MANAGERS: await state.set_state(Form.waiting_for_admin_code2) await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:")

@dp.message(Form.waiting_for_admin_code2, F.text.lower() == "–ª—é–¥–≤–∏–≥ –≤–∞–Ω –±–µ—Ç—Ö–æ–≤–µ–Ω") async def admin_panel_access(message: types.Message, state: FSMContext): await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_panel()) await state.clear()

@dp.callback_query(F.data == "admin_answer") async def admin_answer_prompt(callback: types.CallbackQuery): await callback.message.answer("–ù–∞–ø–∏—à–∏: /answer <–∫–æ–¥> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")

@dp.message(F.text.startswith("/answer")) async def manager_answer(message: types.Message): parts = message.text.split(maxsplit=2) if len(parts) < 3: await message.answer("–§–æ—Ä–º–∞—Ç: /answer <–∫–æ–¥> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>") return code, answer = parts[1], parts[2] cursor.execute("SELECT user_id FROM tickets WHERE code = ?", (code,)) row = cursor.fetchone() if not row: await message.answer("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω") return user_id = row[0] try: await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{answer}") await bot.send_message(user_id, "–†–µ—à–µ–Ω–∞ –ª–∏ –≤–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞?", reply_markup=resolve_menu()) await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ") except Exception as e: await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(F.text.startswith("/start")) async def cmd_start(message: types.Message, state: FSMContext): await message.answer( "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É LKN VPN!\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.\n\n" "üõ° –ë—ã—Å—Ç—Ä–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ 24/7.", reply_markup=main_menu() )

@dp.callback_query(F.data == "how_connect") async def how_connect(callback: types.CallbackQuery, state: FSMContext): await callback.answer() await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", reply_markup=device_menu()) await state.set_state(Form.waiting_for_device)

@dp.callback_query(Form.waiting_for_device, F.data.startswith("device_")) async def device_response(callback: types.CallbackQuery, state: FSMContext): device = callback.data.split("_")[1] await callback.answer() if device == "Windows": text = ( "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows:\n1. –°–∫–∞—á–∞–π—Ç–µ Hiddify.\n2. –ù–∞–∂–º–∏—Ç–µ + -> –†—É—á–Ω–æ–π –≤–≤–æ–¥.\n3. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á.\n4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å.\n\n–ö–ª—é—á: {}'".format(BOT_TOKEN) ) else: text = ( "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1. –°–∫–∞—á–∞–π—Ç–µ v2RayTun.\n2. '+' -> –†—É—á–Ω–æ–π –≤–≤–æ–¥.\n3. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á.\n4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å.\n\n–ö–ª—é—á: {}'".format(BOT_TOKEN) ) await callback.message.answer(text, parse_mode="Markdown", reply_markup=resolve_menu()) await state.set_state(Form.waiting_for_resolve)

@dp.callback_query(F.data == "vpn_not_work") async def vpn_not_work(callback: types.CallbackQuery, state: FSMContext): await callback.answer() await callback.message.answer("–ö–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?", reply_markup=server_menu()) await state.set_state(Form.waiting_for_server)

@dp.callback_query(Form.waiting_for_server, F.data.startswith("server_")) async def server_chosen(callback: types.CallbackQuery, state: FSMContext): server = callback.data.split("_")[1] await state.update_data(chosen_server=server) await callback.answer() await callback.message.answer("–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?", reply_markup=countries_menu()) await state.set_state(Form.waiting_for_country)

@dp.callback_query(Form.waiting_for_country, F.data.startswith("country_")) async def country_chosen(callback: types.CallbackQuery, state: FSMContext): country = callback.data.split("_")[1] data = await state.get_data() server = data.get("chosen_server") await callback.answer() if server == "Russia" and country == "–£–∫—Ä–∞–∏–Ω–∞": await callback.message.answer("IP —Å–µ—Ä–≤–µ—Ä–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –≤ –£–∫—Ä–∞–∏–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã.", reply_markup=resolve_menu()) else: await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–ª–µ—Ç–∞ –Ω–∞ 5 —Å–µ–∫, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å VPN.", reply_markup=resolve_menu()) await state.set_state(Form.waiting_for_resolve)

@dp.callback_query(Form.waiting_for_resolve, F.data == "resolved") async def resolved_ok(callback: types.CallbackQuery, state: FSMContext): await callback.answer() await callback.message.answer("–û—Ü–µ–Ω–∏—Ç–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Ç 1 –¥–æ 5", reply_markup=rating_keyboard()) await state.set_state(Form.waiting_for_rating)

@dp.callback_query(Form.waiting_for_resolve, F.data == "not_resolved") async def not_resolved(callback: types.CallbackQuery, state: FSMContext): await callback.answer() await callback.message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏—Ç –µ—ë.") await state.set_state(Form.waiting_for_manager_problem)

@dp.message(Form.waiting_for_manager_problem) async def problem_desc(message: types.Message, state: FSMContext): code = generate_ticket_code() cursor.execute("INSERT INTO tickets (code, user_id, problem, status) VALUES (?, ?, ?, ?)", (code, message.from_user.id, message.text.strip(), "new")) conn.commit() for manager_id in MANAGERS: try: await bot.send_message(manager_id, f"–ü—Ä–æ–±–ª–µ–º–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}\n–ö–æ–¥: {code}\n{message.text.strip()}") except: pass await message.answer("–°–ø–∞—Å–∏–±–æ, –ø—Ä–æ–±–ª–µ–º–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:", reply_markup=rating_keyboard()) await state.set_state(Form.waiting_for_rating)

@dp.callback_query(Form.waiting_for_rating, F.data.startswith("rating_")) async def rate_user(callback: types.CallbackQuery, state: FSMContext): rating = int(callback.data.split("_")[1]) await callback.answer() if rating < 2: await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ") await state.set_state(Form.waiting_for_problem_desc) else: await send_farewell(callback.from_user.id) await state.clear()

@dp.message(Form.waiting_for_problem_desc) async def store_feedback(message: types.Message, state: FSMContext): desc = message.text.strip().lower() cursor.execute("SELECT id, count FROM problem_feedback WHERE description = ?", (desc,)) row = cursor.fetchone() if row: pid, cnt = row cursor.execute("UPDATE problem_feedback SET count = ? WHERE id = ?", (cnt + 1, pid)) else: cursor.execute("INSERT INTO problem_feedback(description, count) VALUES (?, 1)", (desc,)) conn.commit() await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ú—ã —ç—Ç–æ —É—á—Ç—ë–º.") await send_farewell(message.from_user.id) await state.clear()

--- –ó–∞–ø—É—Å–∫ ---

async def main(): dp.include_router(router) await dp.start_polling(bot)

if name == "main": asyncio.run(main())

