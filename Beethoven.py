

    import os
import logging
import random
import string
import sqlite3
from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, CommandHelp
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
import asyncio

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –≤ .env")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    filename="bot.log",
    encoding="utf-8",
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# --- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ---
MOSCOW_TZ = ZoneInfo("Europe/Moscow")

# --- –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞ ---
MANAGERS = {5546292835, 1789838272}
CODEWORD_STEP1 = "–°–∏–º—Ñ–æ–Ω–∏—è"
CODEWORD_STEP2 = "–õ—é–¥–≤–∏–≥ –í–∞–Ω –ë–µ—Ç—Ö–æ–≤–µ–Ω"

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("lknvpn_bot.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS tickets (
    code TEXT PRIMARY KEY,
    user_id INTEGER,
    problem TEXT,
    status TEXT,
    created_at TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS problem_feedback (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    description TEXT,
    count INTEGER DEFAULT 1
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS ideas (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    idea TEXT,
    created_at TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS ratings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    rating INTEGER,
    created_at TEXT
)
""")

conn.commit()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class Form(StatesGroup):
    codeword_wait1 = State()
    codeword_wait2 = State()
    waiting_for_device = State()
    waiting_for_server = State()
    waiting_for_country = State()
    waiting_for_resolve = State()
    waiting_for_problem_desc = State()
    waiting_for_idea = State()
    waiting_for_rating = State()
    waiting_for_manager_problem = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu():
    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(text="–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="how_connect"),
        types.InlineKeyboardButton(text="–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN", callback_data="vpn_not_work"),
    )
    kb.row(
        types.InlineKeyboardButton(text="–°–±–æ—Ä IP –∏ –ª–æ–≥–æ–≤", callback_data="logs"),
        types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ (–∞–∫—Ç—É–∞–ª—å–Ω–æ)", callback_data="paid_subscription"),
    )
    kb.row(
        types.InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é", callback_data="ideas"),
        types.InlineKeyboardButton(text="–°–µ—Ä–≤–µ—Ä –†–§ ‚Äî –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="rf_server"),
    )
    kb.row(
        types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"),
    )
    return kb.as_markup()

def device_menu():
    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(text="Android", callback_data="device_Android"),
        types.InlineKeyboardButton(text="iOS", callback_data="device_iOS"),
    )
    kb.row(
        types.InlineKeyboardButton(text="Windows", callback_data="device_Windows"),
        types.InlineKeyboardButton(text="MacOS", callback_data="device_MacOS"),
    )
    return kb.as_markup()

def server_menu():
    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(text="–†–æ—Å—Å–∏—è üá∑üá∫", callback_data="server_Russia"),
        types.InlineKeyboardButton(text="–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±", callback_data="server_Netherlands"),
    )
    return kb.as_markup()

def countries_menu():
    countries = ["–£–∫—Ä–∞–∏–Ω–∞", "–†–æ—Å—Å–∏—è", "–°–®–ê", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ë–µ–ª–∞—Ä—É—Å—å", "–î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞"]
    kb = InlineKeyboardBuilder()
    for c in countries:
        kb.button(text=c, callback_data=f"country_{c}")
    kb.adjust(2)
    return kb.as_markup()

def resolve_menu():
    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(text="–†–µ—à–µ–Ω–æ", callback_data="resolved"),
        types.InlineKeyboardButton(text="–ù–µ —Ä–µ—à–µ–Ω–æ", callback_data="not_resolved"),
    )
    return kb.as_markup()

def rating_keyboard():
    kb = InlineKeyboardBuilder()
    for i in range(1,6):
        kb.button(text=str(i), callback_data=f"rating_{i}")
    kb.adjust(5)
    return kb.as_markup()

def admin_menu():
    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞—â–µ–Ω–∏–π", callback_data="admin_tickets"),
        types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
    )
    return kb.as_markup()

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def generate_ticket_code(length=6):
    chars = string.ascii_uppercase + string.digits
    while True:
        code = ''.join(random.choice(chars) for _ in range(length))
        cursor.execute("SELECT code FROM tickets WHERE code = ?", (code,))
        if not cursor.fetchone():
            return code

def now_moscow():
    return datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M:%S")

async def send_farewell(user_id: int):
    phrases = [
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å.",
        "–ë—É–¥—å—Ç–µ –Ω–∞ —Å–≤—è–∑–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!",
        "–ï—Å–ª–∏ —á—Ç–æ ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å, LKN VPN 24/7.",
        "–ñ–µ–ª–∞–µ–º –≤–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ VPN.",
    ]
    phrase = random.choice(phrases)
    await bot.send_message(user_id, phrase, reply_markup=main_menu())

async def notify_managers(text: str):
    for manager_id in MANAGERS:
        try:
            await bot.send_message(manager_id, text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É LKN VPN!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é, —Ä–∞–±–æ—Ç–µ VPN –∏ –¥—Ä—É–≥–∏–º –≤–æ–ø—Ä–æ—Å–∞–º.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.",
    )
    await state.set_state(Form.codeword_wait1)

@dp.message(Form.codeword_wait1)
async def process_codeword1(message: types.Message, state: FSMContext):
    if message.text.strip().lower() == CODEWORD_STEP1.lower():
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.")
        await state.set_state(Form.codeword_wait2)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Form.codeword_wait2)
async def process_codeword2(message: types.Message, state: FSMContext):
    if message.text.strip().lower() == CODEWORD_STEP2.lower():
        await message.answer("–ö–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã. –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        await state.clear()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(CommandHelp())
async def cmd_help(message: types.Message):
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help ‚Äî –ü–æ–º–æ—â—å\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )

@dp.callback_query(F.data == "how_connect")
async def cb_how_connect(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", reply_markup=device_menu())
    await state.set_state(Form.waiting_for_device)

@dp.callback_query(F.data == "vpn_not_work")
async def cb_vpn_not_work(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=server_menu())
    await state.set_state(Form.waiting_for_server)

@dp.callback_query(F.data == "logs")
async def cb_logs(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫—Ä–æ–º–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n–í–∞—à VPN –∞–±—Å–æ–ª—é—Ç–Ω–æ –∞–Ω–æ–Ω–∏–º–µ–Ω.", reply_markup=main_menu())

@dp.callback_query(F.data == "paid_subscription")
async def cb_paid_subscription(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç VPN –±–µ—Å–ø–ª–∞—Ç–µ–Ω.\n–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –Ω–µ —Ä–∞–Ω—å—à–µ –∫–æ–Ω—Ü–∞ 2025.", reply_markup=main_menu())

@dp.callback_query(F.data == "ideas")
async def cb_ideas(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –∏–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
    await state.set_state(Form.waiting_for_idea)

@dp.callback_query(F.data == "rf_server")
async def cb_rf_server(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "–°–µ—Ä–≤–µ—Ä—ã –†–§ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –†–ö–ù.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å YouTube –∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.", reply_markup=main_menu()
    )

@dp.callback_query(F.data == "admin_panel")
async def cb_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in MANAGERS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    await callback.answer()
    await callback.message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ---
@dp.callback_query(Form.waiting_for_device, F.data.startswith("device_"))
async def cb_device(callback: types.CallbackQuery, state: FSMContext):
    device = callback.data.split("_")[1]
    await callback.answer()
    key_text = "vless://examplekey"  # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏–∑ –±–∞–∑—ã
    
    instructions = {
        "Android": (
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android:\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ v2RayTun.\n"
            "2. –ù–∞–∂–º–∏—Ç–µ '+' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–†—É—á–Ω–æ–π –≤–≤–æ–¥'.\n"
            "3. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á:\n"
            f"`{key_text}`\n"
            "4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å.\n\n"
            "–°—Ç–∞—Ç—É—Å VPN: –ê–∫—Ç–∏–≤–Ω–æ (VLESS)"
        ),
        "iOS": (
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iOS:\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ ShadowRay.\n"
            "2. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∫–ª—é—á–æ–º:\n"
            f"`{key_text}`\n"
            "3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å.\n\n"
            "–°—Ç–∞—Ç—É—Å VPN: –ê–∫—Ç–∏–≤–Ω–æ (VLESS)"
        ),
        "Windows": (
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows:\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ hiddify.\n"
            "2. –ù–∞–∂–º–∏—Ç–µ '+' ‚Üí '–†—É—á–Ω–æ–π –≤–≤–æ–¥'.\n"
            "3. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á:\n"
            f"`{key_text}`\n"
            "4. –í–∫–ª—é—á–∏—Ç–µ VPN.\n\n"
            "–°—Ç–∞—Ç—É—Å VPN: –ê–∫—Ç–∏–≤–Ω–æ (VLESS)"
        ),
        "MacOS": (
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è MacOS:\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ ShadowRay –∏–ª–∏ –∞–Ω–∞–ª–æ–≥.\n"
            "2. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á:\n"
            f"`{key_text}`\n"
            "3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å.\n\n"
            "–°—Ç–∞—Ç—É—Å VPN: –ê–∫—Ç–∏–≤–Ω–æ (VLESS)"
        ),
    }
    text = instructions.get(device, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=resolve_menu())
    await state.set_state(Form.waiting_for_resolve)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
@dp.callback_query(Form.waiting_for_server, F.data.startswith("server_"))
async def cb_server(callback: types.CallbackQuery, state: FSMContext):
    server = callback.data.split("_")[1]
    await state.update_data(chosen_server=server)
    await callback.answer()
    await callback.message.answer("–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?", reply_markup=countries_menu())
    await state.set_state(Form.waiting_for_country)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã ---
@dp.callback_query(Form.waiting_for_country, F.data.startswith("country_"))
async def cb_country(callback: types.CallbackQuery, state: FSMContext):
    country = callback.data.split("_")[1]
    data = await state.get_data()
    server = data.get("chosen_server")
    await callback.answer()

    if server == "Russia" and country == "–£–∫—Ä–∞–∏–Ω–∞":
        await callback.message.answer(
            "–í–Ω–∏–º–∞–Ω–∏–µ: –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –±–ª–æ–∫–∏—Ä—É—é—Ç IP —Å–µ—Ä–≤–µ—Ä–æ–≤ –†–§.\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±.",
            reply_markup=resolve_menu(),
        )
    else:
        await callback.message.answer(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n"
            "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ/–≤—ã–∫–ª—é—á–∏—Ç–µ VPN\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–°—Ç–∞—Ç—É—Å VPN: –ê–∫—Ç–∏–≤–Ω–æ (VLESS)",
            reply_markup=resolve_menu(),
        )
    await state.set_state(Form.waiting_for_resolve)

# --- –†–µ—à–µ–Ω–æ/–ù–µ —Ä–µ—à–µ–Ω–æ ---
@dp.callback_query(Form.waiting_for_resolve, F.data.in_({"resolved", "not_resolved"}))
async def cb_resolve(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "resolved":
        await callback.message.answer("–†–∞–¥ –ø–æ–º–æ—á—å! –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 5:", reply_markup=rating_keyboard())
        await state.set_state(Form.waiting_for_rating)
    else:
        await callback.message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        await state.set_state(Form.waiting_for_manager_problem)

# --- –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ ---
@dp.callback_query(Form.waiting_for_rating, F.data.startswith("rating_"))
async def cb_rating(callback: types.CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    await callback.answer()
    cursor.execute(
        "INSERT INTO ratings (user_id, rating, created_at) VALUES (?, ?, ?)",
        (callback.from_user.id, rating, now_moscow())
    )
    conn.commit()

    if rating < 2:
        await callback.message.answer("–ñ–∞–ª—å, —á—Ç–æ –Ω–µ –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ.")
        await state.set_state(Form.waiting_for_problem_desc)
    else:
        await send_farewell(callback.from_user.id)
        await state.clear()

# --- –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã ---
@dp.message(Form.waiting_for_problem_desc)
async def msg_problem_desc(message: types.Message, state: FSMContext):
    desc = message.text.strip()
    cursor.execute("SELECT id, count FROM problem_feedback WHERE description = ?", (desc,))
    row = cursor.fetchone()
    if row:
        pid, count = row
        cursor.execute("UPDATE problem_feedback SET count = ? WHERE id = ?", (count + 1, pid))
    else:
        cursor.execute("INSERT INTO problem_feedback(description, count) VALUES (?, 1)", (desc,))
    conn.commit()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º.")
    await send_farewell(message.from_user.id)
    await state.clear()

# --- –ü—Ä–æ–±–ª–µ–º–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É ---
@dp.message(Form.waiting_for_manager_problem)
async def msg_manager_problem(message: types.Message, state: FSMContext):
    problem = message.text.strip()
    code = generate_ticket_code()
    cursor.execute(
        "INSERT INTO tickets (code, user_id, problem, status, created_at) VALUES (?, ?, ?, ?, ?)",
        (code, message.from_user.id, problem, "new", now_moscow())
    )
    conn.commit()
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n–ö–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è: {code}\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –æ—Ç 1 –¥–æ 5.",
        reply_markup=rating_keyboard()
    )
    await state.set_state(Form.waiting_for_rating)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    text = (f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{code} –æ—Ç @{message.from_user.username or message.from_user.full_name}:\n"
            f"{problem}\n"
            f"–í—Ä–µ–º—è: {now_moscow()}")
    await notify_managers(text)

# --- –ò–¥–µ–∏ ---
@dp.message(Form.waiting_for_idea)
async def msg_idea(message: types.Message, state: FSMContext):
    idea = message.text.strip()
    cursor.execute(
        "INSERT INTO ideas (user_id, idea, created_at) VALUES (?, ?, ?)",
        (message.from_user.id, idea, now_moscow())
    )
    conn.commit()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∏–¥–µ—é! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.", reply_markup=main_menu())
    await state.clear()

# --- –ê–¥–º–∏–Ω ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ ---
@dp.callback_query(F.data == "admin_tickets")
async def cb_admin_tickets(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGERS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    cursor.execute("SELECT code, user_id, problem, status, created_at FROM tickets ORDER BY created_at DESC LIMIT 10")
    rows = cursor.fetchall()
    if not rows:
        await callback.message